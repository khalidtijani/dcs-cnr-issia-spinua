#!/bin/bash

# source the ciop functions (e.g. ciop-log, ciop-getparam)
source ${ciop_job_include}
source /home/khalidtijani/.bashrc
# set the environment variables to use ESA BEAM toolbox
#export LD_LIBRARY_PATH=/home/${USER}/MCR_R2016b/v91/runtime/glnxa64:/home/${USER}/MCR_R2016b/v91/bin/glnxa64:/home/${USER}/MCR_R2016b/v91/sys/os/glnxa64:${LD_LIBRARY_PATH}

#export STORAGE=/home/${USER}/storage
#export SPINUA=/home/${USER}/dcs-cnr-issia-spinua/spinua/bin/GAP/gap_chain_v2.0

# define the exit codes
SUCCESS=0
#BEAM_REQUEST_ERROR=1
ERR_BEAM=1
ERR_NOEXPR=2
#ERR_NOINPUT=4

# add a trap to exit gracefully
function cleanExit ()
{
source /home/khalidtijani/.bashrc

#    export LD_LIBRARY_PATH=/home/${USER}/MCR_R2016b/v91/runtime/glnxa64:/home/${USER}/MCR_R2016b/v91/bin/glnxa64:/home/${USER}/MCR_R2016b/v91/sys/os/glnxa64:${LD_LIBRARY_PATH}

 #   export STORAGE=/home/${USER}/storage
 #   export SPINUA=/home/${USER}/dcs-cnr-issia-spinua/spinua/bin/GAP/gap_chain_v2.0
    local retval=$?
    local msg=""

    case ${retval} in
        ${SUCCESS})            msg="Processing successfully concluded";;
 #       ${BEAM_REQUEST_ERROR}) msg="Could not create beam request file";;
        ${ERR_BEAM})           msg="Beam_expr failed to process product ";;
        ${ERR_NOEXPR})         msg="No expression provided";;
 #       ${ERR_NOINPUT})        msg="No input provided";;
        *)                     msg="Unknown error";;
    esac

   [ ${retval} -ne 0 ] && ciop-log "ERROR" "Error ${retval} - ${msg}, processing aborted" || ciop-log "INFO" "${msg}"
   exit ${retval}
}

trap cleanExit EXIT

function main() {
source /home/khalidtijani/.bashrc
 #   export LD_LIBRARY_PATH=/home/${USER}/MCR_R2016b/v91/runtime/glnxa64:/home/${USER}/MCR_R2016b/v91/bin/glnxa64:/home/${USER}/MCR_R2016b/v91/sys/os/glnxa64:${LD_LIBRARY_PATH}

  #  export STORAGE=/home/${USER}/storage
  #  export SPINUA=/home/${USER}/dcs-cnr-issia-spinua/spinua/bin/GAP/gap_chain_v2.0
    #defines the input

    local ver
    ver="v2.0"
    #ver=$1
    local step
    step="00"
    
    
  #  step=$1
    # retrieve the parameters value from workflow or job default value
    rootFolder="`ciop-getparam rootFolder`"
    splitterOutputFolder="`ciop-getparam splitterOut`"
   

    # run a check on the expression value, it can't be empty
    [ -z "$rootFolder" ] && exit $ERR_NOEXPR
    [ -z "$step" ] && exit $ERR_NOEXPR
    [ -z "$splitterOutputFolder" ] && exit $ERR_NOEXPR
        
    # log the value, it helps debugging. 
    # the log entry is available in the process stderr 
    ciop-log "DEBUG" "The InputFolder which the same string of outfoldername used in step 1 of spinua chain : ${splitterOutputFolder}"
    ciop-log "DEBUG" "The RootFolder of results as IN/OUT processing step is: ${rootFolder}"
    


    # report activity in log
    ciop-log "INFO" "The version $ver for spinua chain"
    ciop-log "INFO" "Th step $step for spinua chain"
    
    # retrieve the MER_RR__1P product to the local temporary folder TMPDIR provided by the framework (this folder is only used by this process)
    # the ciop-copy utility will use one of online resource available in the metadata to copy it to the TMPDIR folder
    # the utility returns the local path so the variable $retrieved contains the local path to the MERIS product
    #if [[ ${inputfile:0:4} == "file" ]]; then
    # enclosure=${step}
    #else    
     # enclosure="$( opensearch-client ${inputfile} enclosure )"
    #fi 

    #retrieved=$( ciop-copy -o $TMPDIR "${enclosure}" )

    # check if the file was retrieved, if not exit with the error code $ERR_NOINPUT
    #[ $? -eq 0 ] && [ -e "${retrieved}" ] || return ${ERR_NOINPUT}

    #outputname=$( basename "$retrieved" )

    # report activity in the log
    #ciop-log "INFO" "Retrieved ${outputname}, moving on to expression"

    # prepare the BEAM request

    # invoke the ESA BEAM toolbox

    ${MAINSPINUA}/Main_Spinua_Run $ver $step $rootFolder 0 $splitterOutputFolder - CNR_ISSIA  &> /dev/null
#    /data/input/ciop/storage/spinua/Main_Spinua_Run $ver $step $outfoldername $bbox  &> /dev/null
    # check the exit code
    [ $? -eq 0 ] || return $ERR_BEAM

    # compress the ESA BEAM results
    outputfolder="${STORAGE}/S1Data/$rootFolder/L0_InputData"
    

    #tar cfz ${STORAGE}/${outfoldername}.tgz ${STORAGE}/${outfoldername} ${STORAGE}/${outputfolder} &> /dev/null
  
    # publish the compressed results
    ciop-log "INFO" "Publishing ${outputfolder} " 
    #ciop-publish $STORAGE/$outfoldername.tgz

    # cleanup
    #rm -rf ${retrieved} ${OUTPUTDIR}/${outputname}.d* ${OUTPUTDIR}/${outputname}.tgz 

    return ${SUCCESS}
}

# create the output folder to store the output products and export it
source /home/khalidtijani/.bashrc
#export LD_LIBRARY_PATH=/home/${USER}/MCR_R2016b/v91/runtime/glnxa64:/home/${USER}/MCR_R2016b/v91/bin/glnxa64:/home/${USER}/MCR_R2016b/v91/sys/os/glnxa64:${LD_LIBRARY_PATH}
#export STORAGE=/home/${USER}/storage
#export SPINUA=/home/${USER}/dcs-cnr-issia-spinua/spinua/bin/GAP/gap_chain_v2.0
#TMPDIR=$STORAGE
#mkdir -p ${TMPDIR}/output
#export OUTPUTDIR=${TMPDIR}/output
#step="X0"
#while read step; do
 #   step="X"$step 
  #  main "${step}"
   # res=$?
    #[ ${res} -ne 0 ] && exit ${res}
#done

main  
res=$?
[ ${res} -ne 0 ] && exit ${res}
exit $SUCCESS
